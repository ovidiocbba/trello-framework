name: Execution

# Controls when the workflow will run.
on:
  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:
    inputs:
      scenarioTag:
        description: 'Scenario Tag to execute(e.g. "@TC-00001")'
        type: string
        required: false
        default: '@Regression'

  schedule:
    # Scheduled the execution.
    # Every friday at 21:00 PM (Bolivia).
    # All the cron job in GitHub Actions is in UTC.
    - cron: '0 1 * * 6'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  execution:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    # These permissions are required to generate reports.
    permissions:
      contents: write # To push a branch (gh_pages).

    steps:
      # Cloning you repository to the runner.
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 8 for x64
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: 'temurin'
          architecture: x64

      - name: Install and setup latest Google Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 6.9

      - name: Execute Features
        id: execute-features
        # Configuration variables in your repository.
        # Settings -> Secrets and variables -> Actions -> Secrets(secrets) or Variables(vars).
        run: |
          gradle executeFeatures \
              -Dcucumber.filter.tags="${{ github.event.inputs.scenarioTag || '@Regression' }}" \
              -Pbrowser="CHROME_HEADLESS" \
              -PbaseUrl="${{ vars.BASE_URL }}" \
              -Puser="${{ vars.USER_EMAIL }}" -Ppassword="${{ secrets.USER_PASSWORD }}" \
              -PapiUrl="${{ vars.API_URL }}" \
              -PapiKey="${{ secrets.API_KEY }}" -PapiToken="${{ secrets.API_TOKEN }}"

      # Re-execute if there are failed scenarios using the 'rerun.txt' file.
      - name: Re-Execute Features
        if: ${{ failure() && steps.execute-features.conclusion == 'failure' }}
        run: |
          gradle reExecuteFeatures \
              -Pbrowser="CHROME_HEADLESS" \
              -PbaseUrl="${{ vars.BASE_URL }}" \
              -Puser="${{ vars.USER_EMAIL }}" -Ppassword="${{ secrets.USER_PASSWORD }}" \
              -PapiUrl="${{ vars.API_URL }}" \
              -PapiKey="${{ secrets.API_KEY }}" -PapiToken="${{ secrets.API_TOKEN }}"

      - name: Get Allure history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Allure Report action from marketplace
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: ./build/allure/allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history

      - name: Deploy report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history

      # Upload log file.
      - name: Upload log file
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs${{ github.run_id }}
          path: ./logs
          retention-days: 5
