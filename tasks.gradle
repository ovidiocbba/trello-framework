println 'Available tasks:'
println "Example: clean executeFeatures -Dcucumber.filter.tags='@TC-00001'"
println "Example: clean executeFeatures -Dcucumber.filter.tags='@Regression'"
println "Example: gradle javadoc"

// Task to define arguments and configurations to properties file.
tasks.withType(Test) {

    // [OM] Enable TestNG support (default is JUnit).
    useTestNG()

    // [OM] Define the custom properties to run the regression.
    systemProperty "browser", browser
    systemProperty "baseUrl", baseUrl
    systemProperty "user", user
    systemProperty "password", password
    systemProperty "apiUrl", apiUrl
    systemProperty "apiKey", apiKey
    systemProperty "apiToken", apiToken
    systemProperty "explicitWait", explicitWait
}

task executeFeatures(type: Test) {
    doFirst {
        useTestNG()
        options {
            useDefaultListeners = false
            systemProperty "cucumber.filter.tags", System.getProperty("cucumber.filter.tags")
            jvmArgs = ['-Dcucumber.plugin=io.qameta.allure.cucumber6jvm.AllureCucumber6Jvm']
            jvmArgs = ['-Dcucumber.plugin=rerun:build/target/rerun.txt']
            jvmArgs = ['-Dbrowser=' + browser]
            jvmArgs = ['-DbaseUrl=' + baseUrl]
            jvmArgs = ['-Duser=' + user]
            jvmArgs = ['-Dpassword=' + password]
            jvmArgs = ['-DapiUrl=' + apiUrl]
            jvmArgs = ['-DapiKey=' + apiKey]
            jvmArgs = ['-DapiToken=' + apiToken]
        }
        // [OM] Show standard out and standard error of the test JVM(s) on the console.
        testLogging.showStandardStreams = true
        // [OM] Set JVM arguments for the test JVM(s).
        scanForTestClasses = false
        ignoreFailures = false
        // [OM] Turn off Gradle's HTML report to avoid replacing the reports generated by TestNG library.
        //reports.html.enabled = false
    }
    finalizedBy 'allureReport'
}

// [OM] Task to re execute the failed scenarios using 'rerun.txt' file.
task reExecuteFeatures(type: Test) {
    doFirst {
        File failedScenariosFile = new File("./build/target/rerun.txt")
        // [OM] If the 'rerun.txt' has information it will be re execute the scenarios.
        def failedScenarios = failedScenariosFile.getText()
        if (failedScenariosFile.exists() && !failedScenarios.isEmpty()) {
            println "Re Execute Features"
            println "Scenarios:"
            println failedScenarios
            useTestNG()
            options {
                useDefaultListeners = false
                jvmArgs = ['-Dcucumber.plugin=io.qameta.allure.cucumber6jvm.AllureCucumber6Jvm']
                jvmArgs = ['-Dcucumber.plugin=rerun:build/target/rerun.txt']
                jvmArgs = ['-Dcucumber.features=./build/target/rerun.txt']
                jvmArgs = ['-Dbrowser=' + browser]
                jvmArgs = ['-DbaseUrl=' + baseUrl]
                jvmArgs = ['-Duser=' + user]
                jvmArgs = ['-Dpassword=' + password]
                jvmArgs = ['-DapiUrl=' + apiUrl]
                jvmArgs = ['-DapiKey=' + apiKey]
                jvmArgs = ['-DapiToken=' + apiToken]
            }
        }
        // [OM] Show standard out and standard error of the test JVM(s) on the console.
        testLogging.showStandardStreams = true
        // [OM] Set JVM arguments for the test JVM(s).
        scanForTestClasses = false
        ignoreFailures = false
        // [OM] Turn off Gradle's HTML report to avoid replacing the reports generated by TestNG library.
        //reports.html.enabled = false

    }
    finalizedBy 'allureReport'
}

javadoc {
    classpath += sourceSets.test.compileClasspath
    source += sourceSets.test.allJava
    title = 'Trello Framework'
    options.author = true
    options.footer = "Generated on ${new Date().format('dd MMM yyyy')}"
    options.header = "Documention for version ${project.version}"
    destinationDir = file("${buildDir}/docs/javadoc")
    options.addStringOption('Xwerror', '-quiet')
}

test {
    reports.junitXml.setDestination(file("$buildDir/reports/tests/test/xml"))
    reports.html.setDestination(file("$buildDir/reports/tests/test/html"))
    afterTest { description, result ->
        logger.quiet "Test: ${description.name} in [${description.className}] with result: ${result.resultType}"
    }
}
